/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RookieParser.jj */
/*@egen*/options{
    IGNORE_CASE = true ;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
                 
                   
                           
    JDK_VERSION="1.11";
    OUTPUT_DIRECTORY="src/main/java/edu/berkeley/cs186/database/cli/parser";
                                                                                   
                               
}


PARSER_BEGIN(RookieParser)
package edu.berkeley.cs186.database.cli.parser;

@SuppressWarnings("all")
public class RookieParser/*@bgen(jjtree)*/implements RookieParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRookieParserState jjtree = new JJTRookieParserState();

/*@egen*/

}

PARSER_END(RookieParser)

/** Ignore whitespace **/
SKIP :
{
        " "
    |   "\t"
    |   "\r"
    |   "\n"
}

/* Reserved tokens */
TOKEN:
{
        <SCOL: ";">
    |   <DOT: ".">
    |   <OPEN_PAR: "(">
    |   <CLOSE_PAR: ")">
    |   <COMMA: ",">
    |   <STAR: "*">
    |   <FSLASH: "/">
    |   <PERCENT: "%">
    |   <PLUS: "+">
    |   <MINUS: "-">
    |   <LT: "<">
    |   <LT_EQ: "<=">
    |   <GT: ">">
    |   <GT_EQ: ">=">
    |   <EQEQ: "==">
    |   <EQ: "=">
    |   <NOT_EQ1: "!=">
    |   <NOT_EQ2: "<>">
    |   <FALSE: "false">
    |   <TRUE: "true">
    |   <NOT: "!">
    |   <AND: "&&">
    |   <OR: "||">
}

/* Keywords */
TOKEN:
{
        <K_WITH: "with">
    |   <K_AS: "as">
    |   <K_DELETE: "delete">
    |   <K_INSERT: "insert">
    |   <K_INTO: "into">
    |   <K_UPDATE: "update">
    |   <K_SET: "set">
    |   <K_SELECT: "select">
    |   <K_FROM: "from">
    |   <K_INNER: "inner">
    |   <K_JOIN: "join">
    |   <K_ON: "on">
    |   <K_WHERE: "where">
    |   <K_AND: "and">
    |   <K_OR: "or">
    |   <K_NOT: "not">
    |   <K_GROUP: "group">
    |   <K_BY: "by">
    |   <K_LIMIT: "limit">
    |   <K_CREATE: "create">
    |   <K_DROP: "drop">
    |   <K_TABLE: "table">
    |   <K_VALUES: "values">
    |   <K_INDEX: "index">
    |   <K_BEGIN: "begin">
    |   <K_END: "end">
    |   <K_COMMIT: "commit">
    |   <K_TRANSACTION: "transaction">
    |   <K_SAVEPOINT: "savepoint">
    |   <K_ROLLBACK: "rollback">
    |   <K_TO: "to">
    |   <K_RELEASE: "release">
    |   <K_EXPLAIN: "explain">
    |   <K_QUERY: "query">
    |   <K_PLAN: "plan">
    |   <K_ANALYZE: "analyze">
    |   <K_ORDER: "order">
}


/* Literals and Identifier: 186, .186, 186.186, "186", etc... */
TOKEN: {
    <NUMERIC_LITERAL:
        <DIGITS> ("." (<DIGIT>)*)? ( "E" (<SIGN>)? <DIGITS>)?
        |  "." <DIGITS> ("E" (<SIGN>)? <DIGITS>)?>
    | <DIGITS: ( <DIGIT> )+ >
    | <#DIGIT: ["0" - "9"] >
    | <#SIGN: ["+", "-"]>
    | <STRING_LITERAL: ("'" ( ~["'"] | "''" )* "'") >
    | <IDENTIFIER: ["A"-"Z","_"] (["A"-"Z","0"-"9","_"])*
                | "\"" (~["\n","\r","\""] | "\"\"")+ "\""
                | ("`"  (~["\n","\r","`"]  | "``")+   "`")
                | ("["  (~["\n","\r","]"])+           "]") >
}

ASTSQLStatementList sql_stmt_list()                  :
{/*@bgen(jjtree) SQLStatementList */
  ASTSQLStatementList jjtn000 = new ASTSQLStatementList(JJTSQLSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SQLStatementList */
    try {
/*@egen*/
    (<SCOL>)* sql_stmt() (<SCOL>)+ (sql_stmt() (<SCOL>)+)*/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void sql_stmt():
{}
{
        select_stmt()
    |   LOOKAHEAD(2) create_table_stmt()
    |   create_index_stmt()
    |   LOOKAHEAD(2) drop_table_stmt()
    |   drop_index_stmt()
    |   insert_stmt()
    |   delete_stmt()
    |   update_stmt()
    |   begin_stmt()
    |   commit_stmt()
    |   rollback_stmt()
    |   savepoint_stmt()
    |   release_stmt()
    |   explain_stmt()
}



ASTExecutableStatement executable_stmt()                     :
{/*@bgen(jjtree) ExecutableStatement */
  ASTExecutableStatement jjtn000 = new ASTExecutableStatement(JJTEXECUTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExecutableStatement */
       try {
/*@egen*/
       (select_stmt()
    |   LOOKAHEAD(2) create_table_stmt()
    |   create_index_stmt()
    |   LOOKAHEAD(2) drop_table_stmt()
    |   drop_index_stmt()
    |   insert_stmt()
    |   delete_stmt()
    |   update_stmt()
    |   commit_stmt()
    |   rollback_stmt()
    |   savepoint_stmt()
    |   release_stmt()
    |   explain_stmt()) (<SCOL>)?/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/
}

void explain_stmt()                  :
{/*@bgen(jjtree) ExplainStatement */
  ASTExplainStatement jjtn000 = new ASTExplainStatement(JJTEXPLAINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExplainStatement */
    try {
/*@egen*/
    <K_EXPLAIN> select_stmt()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void drop_table_stmt()                    :
{/*@bgen(jjtree) DropTableStatement */
  ASTDropTableStatement jjtn000 = new ASTDropTableStatement(JJTDROPTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DropTableStatement */
    try {
/*@egen*/
    <K_DROP> <K_TABLE> identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void drop_index_stmt()                    :
{/*@bgen(jjtree) DropIndexStatement */
  ASTDropIndexStatement jjtn000 = new ASTDropIndexStatement(JJTDROPINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DropIndexStatement */
    try {
/*@egen*/
    <K_DROP> <K_INDEX> identifier() <OPEN_PAR> column_name() <CLOSE_PAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void release_stmt()                  :
{/*@bgen(jjtree) ReleaseStatement */
  ASTReleaseStatement jjtn000 = new ASTReleaseStatement(JJTRELEASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReleaseStatement */
    try {
/*@egen*/
    <K_RELEASE> (<K_SAVEPOINT>)? identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void savepoint_stmt()                    :
{/*@bgen(jjtree) SavepointStatement */
  ASTSavepointStatement jjtn000 = new ASTSavepointStatement(JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SavepointStatement */
    try {
/*@egen*/
    <K_SAVEPOINT> identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void rollback_stmt()                   :
{/*@bgen(jjtree) RollbackStatement */
  ASTRollbackStatement jjtn000 = new ASTRollbackStatement(JJTROLLBACKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RollbackStatement */
    try {
/*@egen*/
    <K_ROLLBACK> (<K_TRANSACTION>)? (<K_TO> (<K_SAVEPOINT>)? identifier())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void begin_stmt()                :
{/*@bgen(jjtree) BeginStatement */
  ASTBeginStatement jjtn000 = new ASTBeginStatement(JJTBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BeginStatement */
    try {
/*@egen*/
    <K_BEGIN> (<K_TRANSACTION>)?/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void commit_stmt()                 :
{/*@bgen(jjtree) CommitStatement */
  ASTCommitStatement jjtn000 = new ASTCommitStatement(JJTCOMMITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CommitStatement */
    try {
/*@egen*/
    (<K_COMMIT> | <K_END>) (<K_TRANSACTION>)?/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void insert_stmt()                 :
{/*@bgen(jjtree) InsertStatement */
  ASTInsertStatement jjtn000 = new ASTInsertStatement(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InsertStatement */
    try {
/*@egen*/
    <K_INSERT> <K_INTO> identifier()
    <K_VALUES> insert_values() (<COMMA> insert_values())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void insert_values()              :
{/*@bgen(jjtree) InsertValues */
  ASTInsertValues jjtn000 = new ASTInsertValues(JJTINSERTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InsertValues */
    try {
/*@egen*/
    <OPEN_PAR> literal() (<COMMA> literal())* <CLOSE_PAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void update_stmt()                 :
{/*@bgen(jjtree) UpdateStatement */
  ASTUpdateStatement jjtn000 = new ASTUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UpdateStatement */
    try {
/*@egen*/
    <K_UPDATE> identifier() <K_SET> column_name() "=" expression()
    (<K_WHERE> expression()) ?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void select_stmt()                 :
{/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectStatement */
    try {
/*@egen*/
    (<K_WITH> common_table_expression() (<COMMA> common_table_expression())*)?
    select_clause()
    from_clause()
    (<K_WHERE>  column_value_comparison() (<K_AND> column_value_comparison())?)?
    (<K_GROUP> <K_BY> column_name() (<COMMA> column_name())*)?
    (order_clause())?
    (limit_clause())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void common_table_expression()                       :
{/*@bgen(jjtree) CommonTableExpression */
  ASTCommonTableExpression jjtn000 = new ASTCommonTableExpression(JJTCOMMONTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CommonTableExpression */
    try {
/*@egen*/
    identifier() (<OPEN_PAR> column_name() (<COMMA> column_name())* <CLOSE_PAR> )? <K_AS> <OPEN_PAR> select_stmt() <CLOSE_PAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void delete_stmt()                 :
{/*@bgen(jjtree) DeleteStatement */
  ASTDeleteStatement jjtn000 = new ASTDeleteStatement(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeleteStatement */
    try {
/*@egen*/
    <K_DELETE> <K_FROM> identifier() <K_WHERE> expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void create_table_stmt()                      :
{/*@bgen(jjtree) CreateTableStatement */
  ASTCreateTableStatement jjtn000 = new ASTCreateTableStatement(JJTCREATETABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CreateTableStatement */
    try {
/*@egen*/
    <K_CREATE> <K_TABLE> identifier() ((<OPEN_PAR> column_def() (<COMMA> column_def())* <CLOSE_PAR>) |
    <K_AS> select_stmt())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void create_index_stmt()                      :
{/*@bgen(jjtree) CreateIndexStatement */
  ASTCreateIndexStatement jjtn000 = new ASTCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CreateIndexStatement */
    try {
/*@egen*/
    <K_CREATE> <K_INDEX> <K_ON> identifier() <OPEN_PAR> column_name() <CLOSE_PAR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void column_def()           :
{/*@bgen(jjtree) ColumnDef */
 ASTColumnDef jjtn000 = new ASTColumnDef(JJTCOLUMNDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String i1, i2; Token k = null;}
{/*@bgen(jjtree) ColumnDef */
    try {
/*@egen*/
    i1=identifier()
    i2=identifier()
    (<OPEN_PAR> k=<DIGITS> <CLOSE_PAR>)?/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {
        jjtn000.value = new Object[]{i1, i2, k};
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void select_clause()              :
{/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectClause */
    try {
/*@egen*/
    <K_SELECT> select_column() (<COMMA> select_column())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void limit_clause()             :
{/*@bgen(jjtree) LimitClause */
 ASTLimitClause jjtn000 = new ASTLimitClause(JJTLIMITCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/int n;}
{/*@bgen(jjtree) LimitClause */
    try {
/*@egen*/
    <K_LIMIT> n=integer_literal()/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.value=n;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void from_clause()            :
{/*@bgen(jjtree) FromClause */
 ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String[] atn;}
{/*@bgen(jjtree) FromClause */
     try {
/*@egen*/
     <K_FROM> aliased_table_name() (joined_table())*/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void order_clause()             :
{/*@bgen(jjtree) OrderClause */
 ASTOrderClause jjtn000 = new ASTOrderClause(JJTORDERCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) OrderClause */
    try {
/*@egen*/
    <K_ORDER> <K_BY> s=column_name()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {
        jjtn000.value = s;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void joined_table()             :
{/*@bgen(jjtree) JoinedTable */
 ASTJoinedTable jjtn000 = new ASTJoinedTable(JJTJOINEDTABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String column1, column2;}
{/*@bgen(jjtree) JoinedTable */
    try {
/*@egen*/
    (<K_INNER>)? <K_JOIN> aliased_table_name() <K_ON> column1=column_name() (<EQ> | <EQEQ>) column2=column_name()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = new String[]{column1, column2};
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String select_column()              :
{/*@bgen(jjtree) SelectColumn */
 ASTSelectColumn jjtn000 = new ASTSelectColumn(JJTSELECTCOLUMN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null; String s = null;}
{/*@bgen(jjtree) SelectColumn */
    try {
/*@egen*/
    (t=<STAR> | LOOKAHEAD(3) t=<IDENTIFIER> <DOT> <STAR> | expression() (<K_AS> s=identifier())?)/*@bgen(jjtree)*/
                                                                                                  {
                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                    jjtc000 = false;
                                                                                                  }
/*@egen*/ {
        if (t == null) {
            jjtn000.value = "<>";
        } else if (t.image.equals("*")) {
            jjtn000.value = "*";
        } else {
            jjtn000.value = t.image + ".*";
        }
        if (s!=null) {
            jjtn000.value += " AS " + s;
        }
        return (String) jjtn000.value;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void result_column_name()                  :
{/*@bgen(jjtree) ResultColumnName */
 ASTResultColumnName jjtn000 = new ASTResultColumnName(JJTRESULTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2 = null;}
{/*@bgen(jjtree) ResultColumnName */
        try {
/*@egen*/
        <STAR>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = "*";}
    |   LOOKAHEAD(2) t1=<IDENTIFIER> <OPEN_PAR> (t2=<IDENTIFIER> | t2=<STAR>) <CLOSE_PAR>/*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
                                                                                          }
/*@egen*/ {jjtn000.value = t1.image + "(" + t2.image + ")";}
    |   t1=<IDENTIFIER> (<DOT> (t2=<IDENTIFIER> | t2=<STAR>))?/*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                               }
/*@egen*/ {jjtn000.value = t2 != null ? t1.image + "." + t2.image : t1.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String column_name()            :
{/*@bgen(jjtree) ColumnName */
 ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s = "";}
{/*@bgen(jjtree) ColumnName */
    try {
/*@egen*/
    t=<IDENTIFIER> {s += t.image;} (<DOT> t=<IDENTIFIER> {s += "." + t.image;})?/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ {
        jjtn000.value = s;
        return s;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String identifier()            :
{/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t=<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aliased_table_name()                  :
{/*@bgen(jjtree) AliasedTableName */
 ASTAliasedTableName jjtn000 = new ASTAliasedTableName(JJTALIASEDTABLENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String name1, name2=null;}
{/*@bgen(jjtree) AliasedTableName */
    try {
/*@egen*/
    name1=identifier() (<K_AS> name2=identifier())?/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ {jjtn000.value = new String[]{name1, name2};}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void column_value_comparison()                       :
{/*@bgen(jjtree) ColumnValueComparison */
  ASTColumnValueComparison jjtn000 = new ASTColumnValueComparison(JJTCOLUMNVALUECOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnValueComparison */
    try {
/*@egen*/
    column_name() comparison_operator() literal()
    | literal() comparison_operator() column_name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String numeric_literal()                :
{/*@bgen(jjtree) NumericLiteral */
 ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; jjtn000.value = "";}
{/*@bgen(jjtree) NumericLiteral */
   try {
/*@egen*/
   (t=<PLUS> | t=<MINUS> {jjtn000.value += t.image;})? t=<NUMERIC_LITERAL>/*@bgen(jjtree)*/
                                                                           {
                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
                                                                           }
/*@egen*/ {jjtn000.value += t.image; return (String) jjtn000.value;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

int integer_literal()                :
{/*@bgen(jjtree) IntegerLiteral */
 ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) IntegerLiteral */
   try {
/*@egen*/
   s = numeric_literal()/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.value = Integer.parseInt(s); return Integer.parseInt(s);}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String literal()         :
{/*@bgen(jjtree) Literal */
 ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null; String s=null;}
{/*@bgen(jjtree) Literal */
    try {
/*@egen*/
    (
            t=<STRING_LITERAL>
        |   s=numeric_literal()
        |   t=<TRUE>
        |   t=<FALSE>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (s != null) jjtn000.value = s;
        else jjtn000.value=t.image;
        return (String) jjtn000.value;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String comparison_operator()                    :
{/*@bgen(jjtree) ComparisonOperator */
 ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ComparisonOperator */
    try {
/*@egen*/
    (
            t=<EQ>
        |   t=<EQEQ>
        |   t=<NOT_EQ1>
        |   t=<NOT_EQ2>
        |   t=<LT_EQ>
        |   t=<LT>
        |   t=<GT_EQ>
        |   t=<GT>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=t.image;
        return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

 }

void and_operator()            :
{/*@bgen(jjtree) OrOperator */
  ASTOrOperator jjtn000 = new ASTOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrOperator */
 try {
/*@egen*/<K_AND> | <AND>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void or_operator()             :
{/*@bgen(jjtree) AndOperator */
  ASTAndOperator jjtn000 = new ASTAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndOperator */
 try {
/*@egen*/<K_OR> | <OR>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void not_operator()             :
{/*@bgen(jjtree) NotOperator */
  ASTNotOperator jjtn000 = new ASTNotOperator(JJTNOTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotOperator */
 try {
/*@egen*/<K_NOT> | <NOT>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

String multiplicative_operator()                        :
{/*@bgen(jjtree) MultiplicativeOperator */
 ASTMultiplicativeOperator jjtn000 = new ASTMultiplicativeOperator(JJTMULTIPLICATIVEOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MultiplicativeOperator */
    try {
/*@egen*/
    (
            t=<STAR>
        |   t=<FSLASH>
        |   t=<PERCENT>
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {
        jjtn000.value=t.image;
        return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String additive_operator()                  :
{/*@bgen(jjtree) AdditiveOperator */
 ASTAdditiveOperator jjtn000 = new ASTAdditiveOperator(JJTADDITIVEOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AdditiveOperator */
    try {
/*@egen*/
    (
            t=<PLUS>
        |   t=<MINUS>
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {
        jjtn000.value=t.image;
        return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTExpression expression()            :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/ or_expression()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void or_expression()              :
{/*@bgen(jjtree) OrExpression */
  ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpression */
  try {
/*@egen*/ and_expression() (or_operator() and_expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void and_expression()               :
{/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpression */
  try {
/*@egen*/ not_expression() (and_operator() not_expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void not_expression()               :
{/*@bgen(jjtree) NotExpression */
  ASTNotExpression jjtn000 = new ASTNotExpression(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotExpression */
  try {
/*@egen*/ (not_operator())* comparison_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void comparison_expression()                      :
{/*@bgen(jjtree) ComparisonExpression */
  ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonExpression */
  try {
/*@egen*/ additive_expression() (LOOKAHEAD(2) comparison_operator() additive_expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


void additive_expression()                    :
{/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/ multiplicative_expression() (LOOKAHEAD(2) additive_operator() multiplicative_expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


void multiplicative_expression()                          :
{/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/ primary_expression() (LOOKAHEAD(2) multiplicative_operator() primary_expression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void function_call_expression()                        :
{/*@bgen(jjtree) FunctionCallExpression */
 ASTFunctionCallExpression jjtn000 = new ASTFunctionCallExpression(JJTFUNCTIONCALLEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) FunctionCallExpression */
  try {
/*@egen*/ identifier() <OPEN_PAR> (t=<STAR> {jjtn000.value = t.image;} | (expression() (<COMMA> expression())*))? <CLOSE_PAR>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void primary_expression()                   :
{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
        try {
/*@egen*/
        LOOKAHEAD(3) literal()
    |   LOOKAHEAD(2) function_call_expression()
    |   LOOKAHEAD(2) column_name()
    |   <OPEN_PAR> expression() <CLOSE_PAR>
    |   (additive_operator() primary_expression())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}